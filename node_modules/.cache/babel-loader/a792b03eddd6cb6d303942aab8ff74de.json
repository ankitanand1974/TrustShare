{"ast":null,"code":"\"use strict\";\n\nmodule.exports = EventEmitter;\n\n/**\n * Constructs a new event emitter instance.\n * @classdesc A minimal event emitter.\n * @memberof util\n * @constructor\n */\nfunction EventEmitter() {\n  /**\n   * Registered listeners.\n   * @type {Object.<string,*>}\n   * @private\n   */\n  this._listeners = {};\n}\n\n/**\n * Registers an event listener.\n * @param {string} evt Event name\n * @param {function} fn Listener\n * @param {*} [ctx] Listener context\n * @returns {util.EventEmitter} `this`\n */\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\n  (this._listeners[evt] || (this._listeners[evt] = [])).push({\n    fn: fn,\n    ctx: ctx || this\n  });\n  return this;\n};\n\n/**\n * Removes an event listener or any matching listeners if arguments are omitted.\n * @param {string} [evt] Event name. Removes all listeners if omitted.\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\n * @returns {util.EventEmitter} `this`\n */\nEventEmitter.prototype.off = function off(evt, fn) {\n  if (evt === undefined) this._listeners = {};else {\n    if (fn === undefined) this._listeners[evt] = [];else {\n      var listeners = this._listeners[evt];\n      for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;\n    }\n  }\n  return this;\n};\n\n/**\n * Emits an event by calling its listeners with the specified arguments.\n * @param {string} evt Event name\n * @param {...*} args Arguments\n * @returns {util.EventEmitter} `this`\n */\nEventEmitter.prototype.emit = function emit(evt) {\n  var listeners = this._listeners[evt];\n  if (listeners) {\n    var args = [],\n      i = 1;\n    for (; i < arguments.length;) args.push(arguments[i++]);\n    for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);\n  }\n  return this;\n};","map":null,"metadata":{},"sourceType":"script"}