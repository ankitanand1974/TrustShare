{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar normaliseInput_browser = require('./files/normalise-input.browser.js');\nvar modeToString = require('./mode-to-string.js');\nfunction multipartRequest(_x, _x2) {\n  return _multipartRequest.apply(this, arguments);\n}\nfunction _multipartRequest() {\n  _multipartRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, abortController) {\n    var headers,\n      parts,\n      formData,\n      index,\n      total,\n      _iteratorAbruptCompletion,\n      _didIteratorError,\n      _iteratorError,\n      _iterator,\n      _step,\n      _step$value,\n      content,\n      path,\n      mode,\n      mtime,\n      fileSuffix,\n      type,\n      fieldName,\n      qs,\n      secs,\n      nsecs,\n      end,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            parts = [];\n            formData = new FormData();\n            index = 0;\n            total = 0;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 7;\n            _iterator = _asyncIterator(normaliseInput_browser.normaliseInput(source));\n          case 9:\n            _context.next = 11;\n            return _iterator.next();\n          case 11:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 37;\n              break;\n            }\n            _step$value = _step.value, content = _step$value.content, path = _step$value.path, mode = _step$value.mode, mtime = _step$value.mtime;\n            fileSuffix = '';\n            type = content ? 'file' : 'dir';\n            if (index > 0) {\n              fileSuffix = \"-\".concat(index);\n            }\n            fieldName = type + fileSuffix;\n            qs = [];\n            if (mode !== null && mode !== undefined) {\n              qs.push(\"mode=\".concat(modeToString.modeToString(mode)));\n            }\n            if (mtime != null) {\n              secs = mtime.secs, nsecs = mtime.nsecs;\n              qs.push(\"mtime=\".concat(secs));\n              if (nsecs != null) {\n                qs.push(\"mtime-nsecs=\".concat(nsecs));\n              }\n            }\n            if (qs.length) {\n              fieldName = \"\".concat(fieldName, \"?\").concat(qs.join('&'));\n            }\n            if (!content) {\n              _context.next = 28;\n              break;\n            }\n            formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);\n            end = total + content.size;\n            parts.push({\n              name: path,\n              start: total,\n              end: end\n            });\n            total = end;\n            _context.next = 33;\n            break;\n          case 28:\n            if (!(path != null)) {\n              _context.next = 32;\n              break;\n            }\n            formData.set(fieldName, new File([''], encodeURIComponent(path), {\n              type: 'application/x-directory'\n            }));\n            _context.next = 33;\n            break;\n          case 32:\n            throw new Error('path or content or both must be set');\n          case 33:\n            index++;\n          case 34:\n            _iteratorAbruptCompletion = false;\n            _context.next = 9;\n            break;\n          case 37:\n            _context.next = 43;\n            break;\n          case 39:\n            _context.prev = 39;\n            _context.t0 = _context[\"catch\"](7);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 43:\n            _context.prev = 43;\n            _context.prev = 44;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 48;\n              break;\n            }\n            _context.next = 48;\n            return _iterator.return();\n          case 48:\n            _context.prev = 48;\n            if (!_didIteratorError) {\n              _context.next = 51;\n              break;\n            }\n            throw _iteratorError;\n          case 51:\n            return _context.finish(48);\n          case 52:\n            return _context.finish(43);\n          case 53:\n            return _context.abrupt(\"return\", {\n              total: total,\n              parts: parts,\n              headers: headers,\n              body: formData\n            });\n          case 54:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 39, 43, 53], [44,, 48, 52]]);\n  }));\n  return _multipartRequest.apply(this, arguments);\n}\nexports.multipartRequest = multipartRequest;","map":null,"metadata":{},"sourceType":"script"}