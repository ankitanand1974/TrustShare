{"ast":null,"code":"'use strict';\n\nvar _awaitAsyncGenerator = require(\"/Users/thomasjose/Desktop/TrustShare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\nvar _wrapAsyncGenerator = require(\"/Users/thomasjose/Desktop/TrustShare/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar errCode = require('err-code');\nvar cid = require('multiformats/cid');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nfunction normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n    var cid$1, iterator, first, _iterator3, _step3, _cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _cid2, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _obj;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(input === null || input === undefined)) {\n            _context.next = 2;\n            break;\n          }\n          throw errCode__default['default'](new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n        case 2:\n          cid$1 = cid.CID.asCID(input);\n          if (!cid$1) {\n            _context.next = 7;\n            break;\n          }\n          _context.next = 6;\n          return toPin({\n            cid: cid$1\n          });\n        case 6:\n          return _context.abrupt(\"return\");\n        case 7:\n          if (!(input instanceof String || typeof input === 'string')) {\n            _context.next = 11;\n            break;\n          }\n          _context.next = 10;\n          return toPin({\n            path: input\n          });\n        case 10:\n          return _context.abrupt(\"return\");\n        case 11:\n          if (!(input.cid != null || input.path != null)) {\n            _context.next = 15;\n            break;\n          }\n          _context.next = 14;\n          return toPin(input);\n        case 14:\n          return _context.abrupt(\"return\", _context.sent);\n        case 15:\n          if (!(Symbol.iterator in input)) {\n            _context.next = 63;\n            break;\n          }\n          iterator = input[Symbol.iterator]();\n          first = iterator.next();\n          if (!first.done) {\n            _context.next = 20;\n            break;\n          }\n          return _context.abrupt(\"return\", iterator);\n        case 20:\n          if (!(cid.CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n            _context.next = 41;\n            break;\n          }\n          _context.next = 23;\n          return toPin({\n            cid: first.value\n          });\n        case 23:\n          _iterator3 = _createForOfIteratorHelper(iterator);\n          _context.prev = 24;\n          _iterator3.s();\n        case 26:\n          if ((_step3 = _iterator3.n()).done) {\n            _context.next = 32;\n            break;\n          }\n          _cid = _step3.value;\n          _context.next = 30;\n          return toPin({\n            cid: _cid\n          });\n        case 30:\n          _context.next = 26;\n          break;\n        case 32:\n          _context.next = 37;\n          break;\n        case 34:\n          _context.prev = 34;\n          _context.t0 = _context[\"catch\"](24);\n          _iterator3.e(_context.t0);\n        case 37:\n          _context.prev = 37;\n          _iterator3.f();\n          return _context.finish(37);\n        case 40:\n          return _context.abrupt(\"return\");\n        case 41:\n          if (!(first.value.cid != null || first.value.path != null)) {\n            _context.next = 62;\n            break;\n          }\n          _context.next = 44;\n          return toPin(first.value);\n        case 44:\n          _iterator4 = _createForOfIteratorHelper(iterator);\n          _context.prev = 45;\n          _iterator4.s();\n        case 47:\n          if ((_step4 = _iterator4.n()).done) {\n            _context.next = 53;\n            break;\n          }\n          obj = _step4.value;\n          _context.next = 51;\n          return toPin(obj);\n        case 51:\n          _context.next = 47;\n          break;\n        case 53:\n          _context.next = 58;\n          break;\n        case 55:\n          _context.prev = 55;\n          _context.t1 = _context[\"catch\"](45);\n          _iterator4.e(_context.t1);\n        case 58:\n          _context.prev = 58;\n          _iterator4.f();\n          return _context.finish(58);\n        case 61:\n          return _context.abrupt(\"return\");\n        case 62:\n          throw errCode__default['default'](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n        case 63:\n          if (!(Symbol.asyncIterator in input)) {\n            _context.next = 137;\n            break;\n          }\n          _iterator5 = input[Symbol.asyncIterator]();\n          _context.next = 67;\n          return _awaitAsyncGenerator(_iterator5.next());\n        case 67:\n          _first = _context.sent;\n          if (!_first.done) {\n            _context.next = 70;\n            break;\n          }\n          return _context.abrupt(\"return\", _iterator5);\n        case 70:\n          if (!(cid.CID.asCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n            _context.next = 103;\n            break;\n          }\n          _context.next = 73;\n          return toPin({\n            cid: _first.value\n          });\n        case 73:\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 75;\n          _iterator = _asyncIterator(_iterator5);\n        case 77:\n          _context.next = 79;\n          return _awaitAsyncGenerator(_iterator.next());\n        case 79:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 86;\n            break;\n          }\n          _cid2 = _step.value;\n          _context.next = 83;\n          return toPin({\n            cid: _cid2\n          });\n        case 83:\n          _iteratorAbruptCompletion = false;\n          _context.next = 77;\n          break;\n        case 86:\n          _context.next = 92;\n          break;\n        case 88:\n          _context.prev = 88;\n          _context.t2 = _context[\"catch\"](75);\n          _didIteratorError = true;\n          _iteratorError = _context.t2;\n        case 92:\n          _context.prev = 92;\n          _context.prev = 93;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 97;\n            break;\n          }\n          _context.next = 97;\n          return _awaitAsyncGenerator(_iterator.return());\n        case 97:\n          _context.prev = 97;\n          if (!_didIteratorError) {\n            _context.next = 100;\n            break;\n          }\n          throw _iteratorError;\n        case 100:\n          return _context.finish(97);\n        case 101:\n          return _context.finish(92);\n        case 102:\n          return _context.abrupt(\"return\");\n        case 103:\n          if (!(_first.value.cid != null || _first.value.path != null)) {\n            _context.next = 136;\n            break;\n          }\n          _context.next = 106;\n          return toPin(_first.value);\n        case 106:\n          _iteratorAbruptCompletion2 = false;\n          _didIteratorError2 = false;\n          _context.prev = 108;\n          _iterator2 = _asyncIterator(_iterator5);\n        case 110:\n          _context.next = 112;\n          return _awaitAsyncGenerator(_iterator2.next());\n        case 112:\n          if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n            _context.next = 119;\n            break;\n          }\n          _obj = _step2.value;\n          _context.next = 116;\n          return toPin(_obj);\n        case 116:\n          _iteratorAbruptCompletion2 = false;\n          _context.next = 110;\n          break;\n        case 119:\n          _context.next = 125;\n          break;\n        case 121:\n          _context.prev = 121;\n          _context.t3 = _context[\"catch\"](108);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context.t3;\n        case 125:\n          _context.prev = 125;\n          _context.prev = 126;\n          if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n            _context.next = 130;\n            break;\n          }\n          _context.next = 130;\n          return _awaitAsyncGenerator(_iterator2.return());\n        case 130:\n          _context.prev = 130;\n          if (!_didIteratorError2) {\n            _context.next = 133;\n            break;\n          }\n          throw _iteratorError2;\n        case 133:\n          return _context.finish(130);\n        case 134:\n          return _context.finish(125);\n        case 135:\n          return _context.abrupt(\"return\");\n        case 136:\n          throw errCode__default['default'](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n        case 137:\n          throw errCode__default['default'](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n        case 138:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[24, 34, 37, 40], [45, 55, 58, 61], [75, 88, 92, 102], [93,, 97, 101], [108, 121, 125, 135], [126,, 130, 134]]);\n  }));\n  return _normaliseInput.apply(this, arguments);\n}\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n  if (!path) {\n    throw errCode__default['default'](new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}\nexports.normaliseInput = normaliseInput;","map":null,"metadata":{},"sourceType":"script"}