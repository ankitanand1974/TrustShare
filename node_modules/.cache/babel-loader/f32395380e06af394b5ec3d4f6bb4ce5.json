{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\nvar _objectSpread = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar cid = require('multiformats/cid');\nvar configure = require('../lib/configure.js');\nvar normaliseInput = require('ipfs-core-utils/pins/normalise-input');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar createAddAll = configure.configure(function (api) {\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _step$value,\n        path,\n        recursive,\n        metadata,\n        res,\n        _iteratorAbruptCompletion2,\n        _didIteratorError2,\n        _iteratorError2,\n        _iterator2,\n        _step2,\n        pin,\n        _iterator3,\n        _step3,\n        cid$1,\n        _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(normaliseInput.normaliseInput(source));\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 7:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 63;\n                break;\n              }\n              _step$value = _step.value, path = _step$value.path, recursive = _step$value.recursive, metadata = _step$value.metadata;\n              _context.next = 11;\n              return _awaitAsyncGenerator(api.post('pin/add', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams.toUrlSearchParams(_objectSpread({}, options, {\n                  arg: path,\n                  recursive: recursive,\n                  metadata: metadata ? JSON.stringify(metadata) : undefined,\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n            case 11:\n              res = _context.sent;\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context.prev = 14;\n              _iterator2 = _asyncIterator(res.ndjson());\n            case 16:\n              _context.next = 18;\n              return _awaitAsyncGenerator(_iterator2.next());\n            case 18:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n                _context.next = 44;\n                break;\n              }\n              pin = _step2.value;\n              if (!pin.Pins) {\n                _context.next = 39;\n                break;\n              }\n              _iterator3 = _createForOfIteratorHelper(pin.Pins);\n              _context.prev = 22;\n              _iterator3.s();\n            case 24:\n              if ((_step3 = _iterator3.n()).done) {\n                _context.next = 30;\n                break;\n              }\n              cid$1 = _step3.value;\n              _context.next = 28;\n              return cid.CID.parse(cid$1);\n            case 28:\n              _context.next = 24;\n              break;\n            case 30:\n              _context.next = 35;\n              break;\n            case 32:\n              _context.prev = 32;\n              _context.t0 = _context[\"catch\"](22);\n              _iterator3.e(_context.t0);\n            case 35:\n              _context.prev = 35;\n              _iterator3.f();\n              return _context.finish(35);\n            case 38:\n              return _context.abrupt(\"continue\", 41);\n            case 39:\n              _context.next = 41;\n              return cid.CID.parse(pin);\n            case 41:\n              _iteratorAbruptCompletion2 = false;\n              _context.next = 16;\n              break;\n            case 44:\n              _context.next = 50;\n              break;\n            case 46:\n              _context.prev = 46;\n              _context.t1 = _context[\"catch\"](14);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n            case 50:\n              _context.prev = 50;\n              _context.prev = 51;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context.next = 55;\n                break;\n              }\n              _context.next = 55;\n              return _awaitAsyncGenerator(_iterator2.return());\n            case 55:\n              _context.prev = 55;\n              if (!_didIteratorError2) {\n                _context.next = 58;\n                break;\n              }\n              throw _iteratorError2;\n            case 58:\n              return _context.finish(55);\n            case 59:\n              return _context.finish(50);\n            case 60:\n              _iteratorAbruptCompletion = false;\n              _context.next = 5;\n              break;\n            case 63:\n              _context.next = 69;\n              break;\n            case 65:\n              _context.prev = 65;\n              _context.t2 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t2;\n            case 69:\n              _context.prev = 69;\n              _context.prev = 70;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 74;\n                break;\n              }\n              _context.next = 74;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 74:\n              _context.prev = 74;\n              if (!_didIteratorError) {\n                _context.next = 77;\n                break;\n              }\n              throw _iteratorError;\n            case 77:\n              return _context.finish(74);\n            case 78:\n              return _context.finish(69);\n            case 79:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 65, 69, 79], [14, 46, 50, 60], [22, 32, 35, 38], [51,, 55, 59], [70,, 74, 78]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n  return addAll;\n});\nexports.createAddAll = createAddAll;","map":null,"metadata":{},"sourceType":"script"}