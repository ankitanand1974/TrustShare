{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar cborg = require('cborg');\nvar cid = require('multiformats/cid');\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\nvar cborg__namespace = /*#__PURE__*/_interopNamespace(cborg);\nvar CID_CBOR_TAG = 42;\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n  var cid$1 = cid.CID.asCID(obj);\n  if (!cid$1) {\n    return null;\n  }\n  var bytes = new Uint8Array(cid$1.bytes.byteLength + 1);\n  bytes.set(cid$1.bytes, 1);\n  return [new cborg__namespace.Token(cborg__namespace.Type.tag, CID_CBOR_TAG), new cborg__namespace.Token(cborg__namespace.Type.bytes, bytes)];\n}\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n  return null;\n}\nvar encodeOptions = {\n  float64: true,\n  typeEncoders: {\n    Object: cidEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\nfunction cidDecoder(bytes) {\n  if (bytes[0] !== 0) {\n    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');\n  }\n  return cid.CID.decode(bytes.subarray(1));\n}\nvar decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[CID_CBOR_TAG] = cidDecoder;\nvar name = 'dag-cbor';\nvar code = 113;\nvar encode = function encode(node) {\n  return cborg__namespace.encode(node, encodeOptions);\n};\nvar decode = function decode(data) {\n  return cborg__namespace.decode(data, decodeOptions);\n};\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;","map":null,"metadata":{},"sourceType":"script"}