{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar byteUtils = require('./byte-utils.js');\nvar defaultChunkSize = 256;\nvar Bl = /*#__PURE__*/function () {\n  function Bl() {\n    var chunkSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultChunkSize;\n    _classCallCheck(this, Bl);\n    this.chunkSize = chunkSize;\n    this.cursor = 0;\n    this.maxCursor = -1;\n    this.chunks = [];\n    this._initReuseChunk = null;\n  }\n  _createClass(Bl, [{\n    key: \"reset\",\n    value: function reset() {\n      this.chunks = [];\n      this.cursor = 0;\n      this.maxCursor = -1;\n      if (this._initReuseChunk !== null) {\n        this.chunks.push(this._initReuseChunk);\n        this.maxCursor = this._initReuseChunk.length - 1;\n      }\n    }\n  }, {\n    key: \"push\",\n    value: function push(bytes) {\n      var topChunk = this.chunks[this.chunks.length - 1];\n      var newMax = this.cursor + bytes.length;\n      if (newMax <= this.maxCursor + 1) {\n        var chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n        topChunk.set(bytes, chunkPos);\n      } else {\n        if (topChunk) {\n          var _chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;\n          if (_chunkPos < topChunk.length) {\n            this.chunks[this.chunks.length - 1] = topChunk.subarray(0, _chunkPos);\n            this.maxCursor = this.cursor - 1;\n          }\n        }\n        if (bytes.length < 64 && bytes.length < this.chunkSize) {\n          topChunk = byteUtils.alloc(this.chunkSize);\n          this.chunks.push(topChunk);\n          this.maxCursor += topChunk.length;\n          if (this._initReuseChunk === null) {\n            this._initReuseChunk = topChunk;\n          }\n          topChunk.set(bytes, 0);\n        } else {\n          this.chunks.push(bytes);\n          this.maxCursor += bytes.length;\n        }\n      }\n      this.cursor += bytes.length;\n    }\n  }, {\n    key: \"toBytes\",\n    value: function toBytes() {\n      var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var byts;\n      if (this.chunks.length === 1) {\n        var chunk = this.chunks[0];\n        if (reset && this.cursor > chunk.length / 2) {\n          byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);\n          this._initReuseChunk = null;\n          this.chunks = [];\n        } else {\n          byts = byteUtils.slice(chunk, 0, this.cursor);\n        }\n      } else {\n        byts = byteUtils.concat(this.chunks, this.cursor);\n      }\n      if (reset) {\n        this.reset();\n      }\n      return byts;\n    }\n  }]);\n  return Bl;\n}();\nexports.Bl = Bl;","map":null,"metadata":{},"sourceType":"script"}