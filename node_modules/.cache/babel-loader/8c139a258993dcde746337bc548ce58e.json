{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar errCode = require('err-code');\nvar itPeekable = require('it-peekable');\nvar browserStreamToIt = require('browser-readablestream-to-it');\nvar all = require('it-all');\nvar utils = require('./utils.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar itPeekable__default = /*#__PURE__*/_interopDefaultLegacy(itPeekable);\nvar browserStreamToIt__default = /*#__PURE__*/_interopDefaultLegacy(browserStreamToIt);\nvar all__default = /*#__PURE__*/_interopDefaultLegacy(all);\nfunction normaliseContent(_x) {\n  return _normaliseContent.apply(this, arguments);\n}\nfunction _normaliseContent() {\n  _normaliseContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var peekable, _yield$peekable$peek, value, done;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!utils.isBytes(input)) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt(\"return\", new Blob([input]));\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context.next = 4;\n              break;\n            }\n            return _context.abrupt(\"return\", new Blob([input.toString()]));\n          case 4:\n            if (!utils.isBlob(input)) {\n              _context.next = 6;\n              break;\n            }\n            return _context.abrupt(\"return\", input);\n          case 6:\n            if (utils.isReadableStream(input)) {\n              input = browserStreamToIt__default['default'](input);\n            }\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context.next = 28;\n              break;\n            }\n            peekable = itPeekable__default['default'](input);\n            _context.next = 11;\n            return peekable.peek();\n          case 11:\n            _yield$peekable$peek = _context.sent;\n            value = _yield$peekable$peek.value;\n            done = _yield$peekable$peek.done;\n            if (!done) {\n              _context.next = 16;\n              break;\n            }\n            return _context.abrupt(\"return\", itToBlob(peekable));\n          case 16:\n            peekable.push(value);\n            if (!Number.isInteger(value)) {\n              _context.next = 26;\n              break;\n            }\n            _context.t0 = Blob;\n            _context.t1 = Uint8Array;\n            _context.next = 22;\n            return all__default['default'](peekable);\n          case 22:\n            _context.t2 = _context.sent;\n            _context.t3 = _context.t1.from.call(_context.t1, _context.t2);\n            _context.t4 = [_context.t3];\n            return _context.abrupt(\"return\", new _context.t0(_context.t4));\n          case 26:\n            if (!(utils.isBytes(value) || typeof value === 'string' || value instanceof String)) {\n              _context.next = 28;\n              break;\n            }\n            return _context.abrupt(\"return\", itToBlob(peekable));\n          case 28:\n            throw errCode__default['default'](new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _normaliseContent.apply(this, arguments);\n}\nfunction itToBlob(_x2) {\n  return _itToBlob.apply(this, arguments);\n}\nfunction _itToBlob() {\n  _itToBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream) {\n    var parts, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            parts = [];\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(stream);\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 13;\n              break;\n            }\n            chunk = _step.value;\n            parts.push(chunk);\n          case 10:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 5;\n            break;\n          case 13:\n            _context2.next = 19;\n            break;\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n          case 19:\n            _context2.prev = 19;\n            _context2.prev = 20;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 24;\n              break;\n            }\n            _context2.next = 24;\n            return _iterator.return();\n          case 24:\n            _context2.prev = 24;\n            if (!_didIteratorError) {\n              _context2.next = 27;\n              break;\n            }\n            throw _iteratorError;\n          case 27:\n            return _context2.finish(24);\n          case 28:\n            return _context2.finish(19);\n          case 29:\n            return _context2.abrupt(\"return\", new Blob(parts));\n          case 30:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n  }));\n  return _itToBlob.apply(this, arguments);\n}\nexports.normaliseContent = normaliseContent;","map":null,"metadata":{},"sourceType":"script"}