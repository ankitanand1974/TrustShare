{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\nvar _objectSpread = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _slicedToArray = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar cid = require('multiformats/cid');\nvar objectToCamel = require('./lib/object-to-camel.js');\nvar configure = require('./lib/configure.js');\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\nvar toUrlSearchParams = require('./lib/to-url-search-params.js');\nvar abortSignal = require('./lib/abort-signal.js');\nvar nativeAbortController = require('native-abort-controller');\nvar createAddAll = configure.configure(function (api) {\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var options,\n        controller,\n        signal,\n        _yield$_awaitAsyncGen,\n        headers,\n        body,\n        total,\n        parts,\n        _ref,\n        _ref2,\n        progressFn,\n        onUploadProgress,\n        res,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        file,\n        _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              controller = new nativeAbortController.AbortController();\n              signal = abortSignal.abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest.multipartRequest(source, controller, options.headers));\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              total = _yield$_awaitAsyncGen.total;\n              parts = _yield$_awaitAsyncGen.parts;\n              _ref = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [undefined, undefined], _ref2 = _slicedToArray(_ref, 2), progressFn = _ref2[0], onUploadProgress = _ref2[1];\n              _context.next = 13;\n              return _awaitAsyncGenerator(api.post('add', {\n                searchParams: toUrlSearchParams.toUrlSearchParams(_objectSpread({\n                  'stream-channels': true\n                }, options, {\n                  progress: Boolean(progressFn)\n                })),\n                onUploadProgress: onUploadProgress,\n                signal: signal,\n                headers: headers,\n                body: body\n              }));\n            case 13:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 16;\n              _iterator = _asyncIterator(res.ndjson());\n            case 18:\n              _context.next = 20;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 20:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 32;\n                break;\n              }\n              file = _step.value;\n              file = objectToCamel.objectToCamel(file);\n              if (!(file.hash !== undefined)) {\n                _context.next = 28;\n                break;\n              }\n              _context.next = 26;\n              return toCoreInterface(file);\n            case 26:\n              _context.next = 29;\n              break;\n            case 28:\n              if (progressFn) {\n                progressFn(file.bytes || 0, file.name);\n              }\n            case 29:\n              _iteratorAbruptCompletion = false;\n              _context.next = 18;\n              break;\n            case 32:\n              _context.next = 38;\n              break;\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](16);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 38:\n              _context.prev = 38;\n              _context.prev = 39;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 43;\n                break;\n              }\n              _context.next = 43;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 43:\n              _context.prev = 43;\n              if (!_didIteratorError) {\n                _context.next = 46;\n                break;\n              }\n              throw _iteratorError;\n            case 46:\n              return _context.finish(43);\n            case 47:\n              return _context.finish(38);\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16, 34, 38, 48], [39,, 43, 47]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n  return addAll;\n});\nvar createProgressHandler = function createProgressHandler(total, parts, progress) {\n  return parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n};\nvar createOnUploadProgress = function createOnUploadProgress(size, parts, progress) {\n  var index = 0;\n  var count = parts.length;\n  return function (_ref3) {\n    var loaded = _ref3.loaded,\n      total = _ref3.total;\n    var position = Math.floor(loaded / total * size);\n    while (index < count) {\n      var _parts$index = parts[index],\n        start = _parts$index.start,\n        end = _parts$index.end,\n        name = _parts$index.name;\n      if (position < end) {\n        progress(position - start, name);\n        break;\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\nfunction toCoreInterface(_ref4) {\n  var name = _ref4.name,\n    hash = _ref4.hash,\n    size = _ref4.size,\n    mode = _ref4.mode,\n    mtime = _ref4.mtime,\n    mtimeNsecs = _ref4.mtimeNsecs;\n  var output = {\n    path: name,\n    cid: cid.CID.parse(hash),\n    size: parseInt(size)\n  };\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n  return output;\n}\nexports.createAddAll = createAddAll;","map":null,"metadata":{},"sourceType":"script"}