{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\Ankit Anand\\\\Desktop\\\\New folder (2)\\\\Our_Storage_Dapp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar errCode = require('err-code');\nvar cid = require('multiformats/cid');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nfunction normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n    var cid$1, iterator, first, _iterator3, _step3, _cid, _iterator4, _step4, obj, _iterator5, _first, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _cid2, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _obj;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n            throw errCode__default['default'](new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n          case 2:\n            cid$1 = cid.CID.asCID(input);\n            if (!cid$1) {\n              _context.next = 7;\n              break;\n            }\n            _context.next = 6;\n            return toPin({\n              cid: cid$1\n            });\n          case 6:\n            return _context.abrupt(\"return\");\n          case 7:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 11;\n              break;\n            }\n            _context.next = 10;\n            return toPin({\n              path: input\n            });\n          case 10:\n            return _context.abrupt(\"return\");\n          case 11:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 15;\n              break;\n            }\n            _context.next = 14;\n            return toPin(input);\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n          case 15:\n            if (!(Symbol.iterator in input)) {\n              _context.next = 63;\n              break;\n            }\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n            if (!first.done) {\n              _context.next = 20;\n              break;\n            }\n            return _context.abrupt(\"return\", iterator);\n          case 20:\n            if (!(cid.CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 41;\n              break;\n            }\n            _context.next = 23;\n            return toPin({\n              cid: first.value\n            });\n          case 23:\n            _iterator3 = _createForOfIteratorHelper(iterator);\n            _context.prev = 24;\n            _iterator3.s();\n          case 26:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 32;\n              break;\n            }\n            _cid = _step3.value;\n            _context.next = 30;\n            return toPin({\n              cid: _cid\n            });\n          case 30:\n            _context.next = 26;\n            break;\n          case 32:\n            _context.next = 37;\n            break;\n          case 34:\n            _context.prev = 34;\n            _context.t0 = _context[\"catch\"](24);\n            _iterator3.e(_context.t0);\n          case 37:\n            _context.prev = 37;\n            _iterator3.f();\n            return _context.finish(37);\n          case 40:\n            return _context.abrupt(\"return\");\n          case 41:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 62;\n              break;\n            }\n            _context.next = 44;\n            return toPin(first.value);\n          case 44:\n            _iterator4 = _createForOfIteratorHelper(iterator);\n            _context.prev = 45;\n            _iterator4.s();\n          case 47:\n            if ((_step4 = _iterator4.n()).done) {\n              _context.next = 53;\n              break;\n            }\n            obj = _step4.value;\n            _context.next = 51;\n            return toPin(obj);\n          case 51:\n            _context.next = 47;\n            break;\n          case 53:\n            _context.next = 58;\n            break;\n          case 55:\n            _context.prev = 55;\n            _context.t1 = _context[\"catch\"](45);\n            _iterator4.e(_context.t1);\n          case 58:\n            _context.prev = 58;\n            _iterator4.f();\n            return _context.finish(58);\n          case 61:\n            return _context.abrupt(\"return\");\n          case 62:\n            throw errCode__default['default'](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n          case 63:\n            if (!(Symbol.asyncIterator in input)) {\n              _context.next = 137;\n              break;\n            }\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 67;\n            return _awaitAsyncGenerator(_iterator5.next());\n          case 67:\n            _first = _context.sent;\n            if (!_first.done) {\n              _context.next = 70;\n              break;\n            }\n            return _context.abrupt(\"return\", _iterator5);\n          case 70:\n            if (!(cid.CID.asCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 103;\n              break;\n            }\n            _context.next = 73;\n            return toPin({\n              cid: _first.value\n            });\n          case 73:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 75;\n            _iterator = _asyncIterator(_iterator5);\n          case 77:\n            _context.next = 79;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 79:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 86;\n              break;\n            }\n            _cid2 = _step.value;\n            _context.next = 83;\n            return toPin({\n              cid: _cid2\n            });\n          case 83:\n            _iteratorAbruptCompletion = false;\n            _context.next = 77;\n            break;\n          case 86:\n            _context.next = 92;\n            break;\n          case 88:\n            _context.prev = 88;\n            _context.t2 = _context[\"catch\"](75);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n          case 92:\n            _context.prev = 92;\n            _context.prev = 93;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 97;\n              break;\n            }\n            _context.next = 97;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 97:\n            _context.prev = 97;\n            if (!_didIteratorError) {\n              _context.next = 100;\n              break;\n            }\n            throw _iteratorError;\n          case 100:\n            return _context.finish(97);\n          case 101:\n            return _context.finish(92);\n          case 102:\n            return _context.abrupt(\"return\");\n          case 103:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 136;\n              break;\n            }\n            _context.next = 106;\n            return toPin(_first.value);\n          case 106:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context.prev = 108;\n            _iterator2 = _asyncIterator(_iterator5);\n          case 110:\n            _context.next = 112;\n            return _awaitAsyncGenerator(_iterator2.next());\n          case 112:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n              _context.next = 119;\n              break;\n            }\n            _obj = _step2.value;\n            _context.next = 116;\n            return toPin(_obj);\n          case 116:\n            _iteratorAbruptCompletion2 = false;\n            _context.next = 110;\n            break;\n          case 119:\n            _context.next = 125;\n            break;\n          case 121:\n            _context.prev = 121;\n            _context.t3 = _context[\"catch\"](108);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n          case 125:\n            _context.prev = 125;\n            _context.prev = 126;\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context.next = 130;\n              break;\n            }\n            _context.next = 130;\n            return _awaitAsyncGenerator(_iterator2.return());\n          case 130:\n            _context.prev = 130;\n            if (!_didIteratorError2) {\n              _context.next = 133;\n              break;\n            }\n            throw _iteratorError2;\n          case 133:\n            return _context.finish(130);\n          case 134:\n            return _context.finish(125);\n          case 135:\n            return _context.abrupt(\"return\");\n          case 136:\n            throw errCode__default['default'](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n          case 137:\n            throw errCode__default['default'](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n          case 138:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[24, 34, 37, 40], [45, 55, 58, 61], [75, 88, 92, 102], [93,, 97, 101], [108, 121, 125, 135], [126,, 130, 134]]);\n  }));\n  return _normaliseInput.apply(this, arguments);\n}\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n  if (!path) {\n    throw errCode__default['default'](new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}\nexports.normaliseInput = normaliseInput;","map":null,"metadata":{},"sourceType":"script"}